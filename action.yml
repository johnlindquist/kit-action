name: "Script Kit Action"
description: "Uses @johnlindquist/kit to run a script"
author: "John Lindquist"
inputs:
  script:
    required: true
    description: "name of a script in your ./scripts dir"
  args:
    required: false
    description: "args to pass to the script"

outputs:
  result:
    description: "result of the script args"
    value: ${{ steps.script-kit.outputs.result }}

runs:
  using: "composite"
  steps:
    - name: Set kit_tag to next or main
      id: set_kit_tag
      run: |
        echo "Determining the kit_tag based on the branch name..."
        if [ "${{ github.ref_name }}" = "main" ]; then
          echo "Branch is 'main'. Setting kit_tag to 'latest'."
          echo "kit_tag=latest" >> $GITHUB_OUTPUT
        else
          echo "Branch is not 'main'. Assuming it's 'next'. Setting kit_tag to 'next'."
          echo "kit_tag=next" >> $GITHUB_OUTPUT
        fi
        echo "kit_tag has been set successfully."
      shell: bash

    # Check if the directory exists
    - name: Check if repo is already cloned
      id: check_repo
      run: |
        if [ -d "$GITHUB_WORKSPACE/.git" ]; then
          echo "repo_already_cloned=true" >> $GITHUB_ENV
        else
          echo "repo_already_cloned=false" >> $GITHUB_ENV
        fi
      shell: bash

    # If the repo doesn't exist, clone it
    - name: Clone repo
      # Check GITHUB_STATE to see if repo_exists=true
      if: ${{ env.repo_already_cloned == 'false' }}
      uses: actions/checkout@v4
      with:
        clean: false

    - uses: pnpm/action-setup@v4
      name: Install pnpm
      with:
        version: 9.10.0

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.17.0
        cache: 'pnpm'

    - name: Script Kit running ${{ inputs.script }}
      id: script-kit
      run: |

        kit_dir="$HOME/.kit"
        kit_node=$(which pnpm node | xargs dirname | xargs dirname)
        kit_npm=$(which pnpm | xargs dirname)

        # Add npm to PATH
        export PATH="$PATH:$kit_npm"

        export NODE_PATH="$kit_node"        
        export KIT="$kit_dir/node_modules/@johnlindquist/kit"  

        echo "KIT: $KIT"

        mkdir -p $kit_dir     

        echo "Installing @johnlindquist/kit@${{ steps.set_kit_tag.outputs.kit_tag }} to $kit_dir"
        pnpm i --no-lockfile --no-optional --prefix $kit_dir @johnlindquist/kit@${{ steps.set_kit_tag.outputs.kit_tag }}
        pnpm i --no-lockfile --no-optional --prefix $kit_dir/node_modules/@johnlindquist/kit @actions/github @actions/core 

        # cat the $kit_dir package.json
        cat $kit_dir/package.json

        pnpm node --version

        export KENV="$GITHUB_WORKSPACE"

        # Write KENV to the env file
        echo "KENV=$KENV" >> $GITHUB_ENV
        echo "KIT=$KIT" >> $GITHUB_ENV
        echo "NODE_PATH=$NODE_PATH" >> $GITHUB_ENV  

        export KENV_PREFIX=$KENV/scripts

        # If $KENV/package.json doesn't exist, create it
        if [ ! -f "$KENV/package.json" ]; then
          echo "Creating $KENV/package.json"
          cd $KENV && npm init es6 -y
        fi

        # If $KENV_PREFIX pacakge.json doesn't exist, create it
        if [ ! -f "$KENV_PREFIX/package.json" ]; then
          echo "Creating $KENV_PREFIX/package.json"
          cd $KENV_PREFIX && npm init es6 -y
        fi        

        echo "Linking kit dir $KIT to $KENV_PREFIX"
        pnpm i --no-lockfile --no-optional $KIT --prefix $KENV_PREFIX     

        echo "🏃‍♀️ Running: ${{ inputs.script }} ${{ inputs.args }}"

        # If SCRIPTS_DIR is not set, set it to scripts
        if [ -z "$SCRIPTS_DIR" ]; then
          export SCRIPTS_DIR=scripts
          echo "SCRIPTS_DIR=$SCRIPTS_DIR" >> $GITHUB_ENV
        fi

        cd $KENV

        # Echo RUNNER_OS and system details
        echo "RUNNER_OS: $RUNNER_OS"

        if [[ "$RUNNER_OS" == "Windows" ]]; then
          drive_letter=${KIT:1:1}
          echo "drive_letter: $drive_letter"
          KIT="${KIT/\/$drive_letter\//\/$drive_letter:/}"
          echo "pnpm node --experimental-loader $KIT/build/loader.js $KIT/run/github-workflow.js ${{ inputs.script }} ${{ inputs.args }} --trust"
          # TODO: Fix error "Error [ERR_UNSUPPORTED_ESM_URL_SCHEME]: Only URLs with a scheme in: file and data are supported by the default ESM loader. On Windows, absolute paths must be valid file:// URLs. "
          pnpm node --experimental-loader "file://$KIT/build/loader.js" "$KIT/run/github-workflow.js" ${{ inputs.script }} ${{ inputs.args }} --trust
        else
          echo "Running $KNODE/bin/node $KIT/run/github-workflow.js ${{ inputs.script }} ${{ inputs.args }} --trust"
          pnpm node --experimental-loader "$KIT/build/loader.js" "$KIT/run/github-workflow.js" ${{ inputs.script }} ${{ inputs.args }} --trust
        fi

        if [ $? -ne 0 ]; then
          echo "${{ inputs.script }} failed"
          exit 1
        fi
      shell: bash
